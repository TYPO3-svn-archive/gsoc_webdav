<?php
/***************************************************************
*  Copyright notice
*
*  (c) 1999-2007 Kasper Skaarhoj (kasperYYYY@typo3.com)
*  All rights reserved
*
*  This script is part of the TYPO3 project. The TYPO3 project is
*  free software; you can redistribute it and/or modify
*  it under the terms of the GNU General Public License as published by
*  the Free Software Foundation; either version 2 of the License, or
*  (at your option) any later version.
*
*  The GNU General Public License can be found at
*  http://www.gnu.org/copyleft/gpl.html.
*  A copy is found in the textfile GPL.txt and important notices to the license
*  from the author is found in LICENSE.txt distributed with these scripts.
*
*
*  This script is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.
*
*  This copyright notice MUST APPEAR in all copies of the script!
***************************************************************/

//------------------------------------------------------------------------------
// do all the typo3 stuff
	require_once('Classes/typo3init.php');
	tslib_eidtools::connectDB();

	if($_SERVER['REDIRECT_DAV_REDIR']) {
		$extRoot   = '../../typo3conf/ext/webdav/webdavserver.php/';
		$typo3root = '../../typo3/';
	} else{
		$extRoot = '';
		$typo3Root = '../../../typo3/';
	}

//------------------------------------------------------------------------------
// create a new backendusersession ;) need to use basic auth here
	require_once (PATH_t3lib.'class.t3lib_befunc.php');
	require_once (PATH_t3lib.'class.t3lib_userauthgroup.php');
	require_once (PATH_t3lib.'class.t3lib_beuserauth.php');
	require_once (PATH_t3lib.'class.t3lib_tsfebeuserauth.php');
	$BE_USER = t3lib_div::makeInstance('t3lib_tsfeBeUserAuth'); // New backend user object
	$BE_USER->warningEmail = $TYPO3_CONF_VARS['BE']['warning_email_addr'];
	$BE_USER->lockIP = $TYPO3_CONF_VARS['BE']['lockIP'];
	$BE_USER->auth_timeout_field = intval($TYPO3_CONF_VARS['BE']['sessionTimeout']);
	$BE_USER->OS = TYPO3_OS;
//------------------------------------------------------------------------------
// check wether extension is installed
	if(!t3lib_extMgm::isLoaded('webdav')) {
		$flashMessage = t3lib_div::makeInstance(
			't3lib_FlashMessage',
			'
				<p>This extension is now just an skeleton to be backwards compatible.</p>
				<p>Please uninstall it, after changing your webdav client uri, as the functionality is completly moved to EXT:webdav.</p>
				<p>Using the new .htaccess rewrite integration you can use /dav as uri in EXT:webdav.</p>
			',
			'Important Notice: This Extension (EXT:ks_sabredav) is not maintained anymore!',
			t3lib_FlashMessage::ERROR
		);
		echo $flashMessage->render();
		echo 'Sry, without EXT:webdav installed you can not access the webdavserver ;)';
		die();
	}

//------------------------------------------------------------------------------
// dav stuff
	//--------------------------------------------------------------------------
	// sabredav initialization
		require_once 'lib/sabredav/lib/Sabre.autoload.php';
		require_once 'Classes/class.tx_webdav_rootDirs.php';
		require_once 'Classes/class.tx_webdav_browser_plugin.php';
		require_once 'Classes/class.tx_webdav_permission_plugin.php';
	
		#ini_set('display_errors',1);
		#error_reporting(E_ALL);
	//--------------------------------------------------------------------------
	// authenticate
		$auth = new Sabre_HTTP_BasicAuth();
		$result = $auth->getUserPass();
		$BE_USER->setBeUserByName($result[0]);
		
		if (!$result || md5($result[1])!=$BE_USER->user['password']) {
		    $auth->requireLogin();
					$html = '
						<html>
							<head>
								<title>Authentication required - SabreDAV ' . Sabre_DAV_Version::VERSION . '</title>
								<link media="screen" href="'.$extRoot.'../Resources/Public/Stylesheets/main.css" type="text/css" rel="stylesheet">
							</head>
							<body class="authenticationRequired">
								<div id="typo3-container">
									<div id="typo3-top-container">
										<div id="typo3-logo">
											<a onclick="this.blur();" target="_blank" href="http://www.typo3.com/"><img alt="" title="TYPO3 Content Management Framework" src="'.$typo3root.'gfx/typo3logo_mini.png"></a>
										</div>
									</div>
									<div id="typo3-bottom-container">
										<h4 class="uppercase">Authentication required</h4>
										Please login using your TYPO3 Accountdata.
										<h4>Generated by SabreDAV ' . Sabre_DAV_Version::VERSION .'-'. Sabre_DAV_Version::STABILITY . '</h4>
										<a href="http://code.google.com/p/sabredav/">http://code.google.com/p/sabredav/</a>
									</div>
								</div>
							</body>
						</html>
					';
			echo $html;
		    die();
		}
	
	//--------------------------------------------------------------------------
	// fetch filemounts
		$BE_USER->fetchGroupData();
		$fileMounts = $BE_USER->returnFilemounts();
	//--------------------------------------------------------------------------
	// create virtual directories for the filemounts in typo3
		$mounts     = array();
		foreach($fileMounts as $fileMount) {
			#$mounts[] = $m = new ks_sabredav_rootDirs($fileMount['path']);
			#$m->setName($fileMount['name'].'---'.htmlspecialchars($fileMount['path']));
			$mounts[] = $m = new Sabre_DAV_FS_Directory($fileMount['path']);
		}
		//----------------------------------------------------------------------
		// add special folders for admins
		if($BE_USER->isAdmin()) {
			//------------------------------------------------------------------
			// add root folder
			if(is_dir(PATH_site)) {
				$mounts[] = $m = new tx_webdav_rootDirs(PATH_site);
				$m->setName('T3 root');
			}
			//------------------------------------------------------------------
			// add extension folder
			if(is_dir(PATH_site.'typo3conf/ext/')) {
				$mounts[] = $m = new tx_webdav_rootDirs(PATH_site.'typo3conf/ext/');
				$m->setName('T3 typo3conf_ext');
			}
			//------------------------------------------------------------------
			// add typical template folder
			if(is_dir(PATH_site.'fileadmin/templates/')) {
				$mounts[] = $m = new tx_webdav_rootDirs(PATH_site.'fileadmin/templates/');
				$m->setName('T3 fileadmin_templates');
			}
			//------------------------------------------------------------------
			// add user home folder
			if(is_dir($TYPO3_CONF_VARS['BE']['userHomePath'])) {
				$userDirs     = array();
				$userDirArray = $TYPO3_DB->exec_SELECTgetRows(
					'uid,username',
					'be_users',
					'',
					'',
					'username'
				);
				
				foreach($userDirArray as $userDir) {
					if(is_dir($TYPO3_CONF_VARS['BE']['userHomePath'].'/'.$userDir['uid'])) {
						$userDirs[] = $m = new tx_webdav_rootDirs($TYPO3_CONF_VARS['BE']['userHomePath'].'/'.$userDir['uid']);
						$m->setName($userDir['username']);
					}
				}
				unset($userDirArray);
				if(count($userDirs)>0) {
					$mounts[] = $m = new Sabre_DAV_SimpleDirectory('T3 userHomePath',$userDirs);
				}
			}			
			
			//------------------------------------------------------------------
			// add group folder 
			if(is_dir($TYPO3_CONF_VARS['BE']['groupHomePath'])) {
				$groupDirs     = array();
				$groupDirArray = $TYPO3_DB->exec_SELECTgetRows(
					'uid,title',
					'be_groups',
					'',
					'',
					'title'
				);
				foreach($groupDirArray as $groupDir) {
					if(is_dir($TYPO3_CONF_VARS['BE']['groupHomePath'].'/'.$groupDir['uid'])) {
						$groupDirs[] = $m = new tx_webdav_rootDirs($TYPO3_CONF_VARS['BE']['groupHomePath'].'/'.$groupDir['uid']);
						$m->setName($groupDir['title']);
					}
				}
				unset($groupDirArray);
				if(count($groupDirs)>0) {
					$mounts[] = $m = new Sabre_DAV_SimpleDirectory('T3 groupHomePath',$groupDirs);
				}

			}			
		}
		$root       = new Sabre_DAV_SimpleDirectory('root',$mounts); 
		$objectTree = new Sabre_DAV_ObjectTree($root);
		
	//--------------------------------------------------------------------------
	// configure dav server
		$server = new Sabre_DAV_Server($objectTree);
		if($_SERVER['REDIRECT_DAV_REDIR']) {
			$PATH_INFO_len = strlen($_SERVER['PATH_INFO']);
			$path          = urldecode(substr($_SERVER['REDIRECT_URL'],0,-$PATH_INFO_len));
			$server->setBaseUri($path);
		}
		#$server->setBaseUri($_SERVER['PHP_SELF']);
		#$server->setBaseUri('typo3conf/ext/ks_sabredav/webdavserver.php/');
		//----------------------------------------------------------------------
		// add plugins
		$lockBackend = new Sabre_DAV_Locks_Backend_FS('data');
		$server->addPlugin(new Sabre_DAV_Locks_Plugin($lockBackend));
		$server->addPlugin(new Sabre_DAV_Mount_Plugin());
		$server->addPlugin(new tx_webdav_browser_plugin());
		$server->addPlugin(new tx_webdav_permission_plugin());
		// for 1.2.x alpha only
		//$server->addPlugin(new Sabre_DAV_Browser_GuessContentType());
		//----------------------------------------------------------------------
		// start server
		$server->exec();
?>